import { Classpath } from "../../src/classpath";
import { ClassFile } from "../../src/classfile";

describe("convert bytecode to ClassFile", () => {
  test("read java.lang.String.class", async () => {
    const classpath = Classpath.parse(undefined, "../../test/resource/jre");
    const bytecode = await classpath.readClass("MyString");
    const classFile = ClassFile.read(bytecode);
    expect(classFile.classVersion()).toBe("52.0");
    expect(classFile.constantPool.length).toBe(548);
    expect(classFile.classname()).toBe("java/lang/String");
    expect(classFile.superClassname()).toBe("java/lang/Object");
    expect(classFile.interfaceNames()).toStrictEqual([
      "java/io/Serializable",
      "java/lang/Comparable",
      "java/lang/CharSequence",
    ]);
    expect(classFile.fields.length).toBe(5);
    expect(classFile.fields.map((field) => field.name())).toStrictEqual([
      "value",
      "hash",
      "serialVersionUID",
      "serialPersistentFields",
      "CASE_INSENSITIVE_ORDER",
    ]);
    expect(classFile.methods.length).toBe(94);
    expect(classFile.methods.map((method) => method.name())).toStrictEqual([
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "checkBounds",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "<init>",
      "length",
      "isEmpty",
      "charAt",
      "codePointAt",
      "codePointBefore",
      "codePointCount",
      "offsetByCodePoints",
      "getChars",
      "getChars",
      "getBytes",
      "getBytes",
      "getBytes",
      "getBytes",
      "equals",
      "contentEquals",
      "nonSyncContentEquals",
      "contentEquals",
      "equalsIgnoreCase",
      "compareTo",
      "compareToIgnoreCase",
      "regionMatches",
      "regionMatches",
      "startsWith",
      "startsWith",
      "endsWith",
      "hashCode",
      "indexOf",
      "indexOf",
      "indexOfSupplementary",
      "lastIndexOf",
      "lastIndexOf",
      "lastIndexOfSupplementary",
      "indexOf",
      "indexOf",
      "indexOf",
      "indexOf",
      "lastIndexOf",
      "lastIndexOf",
      "lastIndexOf",
      "lastIndexOf",
      "substring",
      "substring",
      "subSequence",
      "concat",
      "replace",
      "matches",
      "contains",
      "replaceFirst",
      "replaceAll",
      "replace",
      "split",
      "split",
      "join",
      "join",
      "toLowerCase",
      "toLowerCase",
      "toUpperCase",
      "toUpperCase",
      "trim",
      "toString",
      "toCharArray",
      "format",
      "format",
      "valueOf",
      "valueOf",
      "valueOf",
      "copyValueOf",
      "copyValueOf",
      "valueOf",
      "valueOf",
      "valueOf",
      "valueOf",
      "valueOf",
      "valueOf",
      "intern",
      "compareTo",
      "<clinit>",
    ]);
  });
});
